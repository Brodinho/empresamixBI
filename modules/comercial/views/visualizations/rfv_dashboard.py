import dash_bootstrap_components as dbc
from dash import html
import streamlit as st
import pandas as pd
from ...services.api_service import ComercialAPIService
from ...components.rfv_analysis import RFVAnalysis
from shared.utils.formatters import format_number, format_currency
from shared.utils.visualizations.insights_cards import render_metrics_section

from modules.comercial.components.grafico_recencia import criar_grafico_recencia
from modules.comercial.components.grafico_frequencia import criar_grafico_frequencia
from modules.comercial.components.grafico_valor import criar_grafico_valor

def criar_layout_rfv(df):
    """
    Cria o layout da p√°gina de an√°lise RFV
    """
    return html.Div([
        dbc.Row([
            html.H2("An√°lise RFV - Rec√™ncia, Frequ√™ncia e Valor", 
                   className="text-primary mb-4")
        ]),
        
        # Linha com cards informativos
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H4("üìÖ Rec√™ncia M√©dia", className="card-title"),
                        html.H3(f"{df['ultima_compra_dias'].mean():.0f} dias")
                    ])
                ])
            ], width=4),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H4("üîÑ Frequ√™ncia M√©dia", className="card-title"),
                        html.H3(f"{df['quantidade_compras'].mean():.1f} compras")
                    ])
                ])
            ], width=4),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H4("üí∞ Ticket M√©dio", className="card-title"),
                        html.H3(f"R$ {df['valor_total_compras'].mean():.2f}")
                    ])
                ])
            ], width=4),
        ], className="mb-4"),
        
        # Linha com os gr√°ficos
        dbc.Row([
            dbc.Col([
                criar_grafico_recencia(df)
            ], width=12, className="mb-4"),
        ]),
        
        dbc.Row([
            dbc.Col([
                criar_grafico_frequencia(df)
            ], width=6),
            dbc.Col([
                criar_grafico_valor(df)
            ], width=6),
        ]),
    ], className="p-4")

def render_rfv():
    """Renderiza a visualiza√ß√£o de an√°lise RFV"""
    try:
        # Obt√©m os dados
        api_service = ComercialAPIService()
        df = api_service.get_rfv_data()
        
        # T√≠tulo da se√ß√£o
        st.markdown("## üíé An√°lise RFV")
        
        # Expander explicativo
        with st.expander("‚ÑπÔ∏è O que √© an√°lise RFV?", expanded=False):
            st.markdown("""
                A **An√°lise RFV** (Rec√™ncia, Frequ√™ncia e Valor) √© uma t√©cnica que avalia o comportamento 
                dos clientes com base em tr√™s m√©tricas principais:
                
                - **Rec√™ncia**: H√° quanto tempo foi a √∫ltima compra
                - **Frequ√™ncia**: Quantas compras foram realizadas
                - **Valor**: Qual o ticket m√©dio das compras
            """)
        
        # Calcula m√©tricas
        media_recencia = df['ultima_compra_dias'].mean()
        media_frequencia = df['quantidade_compras'].mean()
        ticket_medio = df['valor_total_compras'].mean()
        
        # Configura√ß√£o das m√©tricas para os cards
        metrics = {
            'media_recencia': {
                'title': 'üìÖ M√©dia de Rec√™ncia',
                'value': media_recencia,
                'formatter': 'number',
                'suffix': ' dias',
                'decimals': 0,
                'help_text': 'M√©dia de dias desde a √∫ltima compra dos clientes',
                'positive_is_good': False
            },
            'media_frequencia': {
                'title': 'üîÑ M√©dia de Frequ√™ncia',
                'value': media_frequencia,
                'formatter': 'number',
                'suffix': ' compras',
                'decimals': 1,
                'help_text': 'M√©dia de compras por cliente no per√≠odo',
                'positive_is_good': True
            },
            'ticket_medio': {
                'title': 'üí∞ Ticket M√©dio',
                'value': ticket_medio,
                'formatter': 'currency',
                'help_text': 'Valor m√©dio das compras por cliente',
                'positive_is_good': True
            }
        }
        
        # Renderiza os cards de m√©tricas
        render_metrics_section('', metrics, columns=3)
        
        # Separador
        st.markdown("---")
        
        # Gr√°ficos RFV
        st.subheader("üìä Distribui√ß√£o da Rec√™ncia")
        fig_recencia = criar_grafico_recencia(df)
        if fig_recencia:
            st.plotly_chart(fig_recencia, use_container_width=True)
        
        # Layout em duas colunas para os outros gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Distribui√ß√£o da Frequ√™ncia")
            fig_frequencia = criar_grafico_frequencia(df)
            if fig_frequencia:
                st.plotly_chart(fig_frequencia, use_container_width=True)
        
        with col2:
            st.subheader("üí∞ Distribui√ß√£o do Valor")
            fig_valor = criar_grafico_valor(df)
            if fig_valor:
                st.plotly_chart(fig_valor, use_container_width=True)
        
    except Exception as e:
        st.error(f"Erro ao renderizar an√°lise RFV: {str(e)}") 