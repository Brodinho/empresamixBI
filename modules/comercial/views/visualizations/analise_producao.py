import streamlit as st
from ...services.api_service import APIService
from ...services.kpi_service import KPIService
from shared.utils.visualizations.insights_cards import render_metrics_section
from .os_status_chart import create_os_status_chart
from .os_tempo_medio_chart import create_os_tempo_medio_chart
from .os_gargalos_chart import create_os_gargalos_chart
import pandas as pd
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

def render_producao():
    """Renderiza o dashboard de An√°lise de Produ√ß√£o"""
    
    # T√≠tulo da se√ß√£o com √≠cone e texto maiores
    st.markdown("# ü§ù An√°lise de Produ√ß√£o")
    
    # Expander explicativo
    with st.expander("‚ÑπÔ∏è Como interpretar a An√°lise de Produ√ß√£o?", expanded=False):
        st.markdown("""
            A **An√°lise de Produ√ß√£o** permite acompanhar o fluxo produtivo atrav√©s de:
            
            - Status atual das Ordens de Servi√ßo
            - Tempo m√©dio em cada etapa do processo
            - Identifica√ß√£o de gargalos
            - An√°lise de capacidade produtiva
            - Tend√™ncias de produ√ß√£o
        """)
    
    try:
        # Carrega dados uma √∫nica vez e mant√©m em cache
        @st.cache_data(ttl=3600)
        def load_initial_data():
            api_service = APIService()
            return api_service.get_all_data()
        
        # Carrega dados iniciais
        dataframes = load_initial_data()
        
        # Prepara todos os dataframes necess√°rios
        df_os = dataframes['os'].copy()
        df_orcamento = dataframes['orcamento'].copy()
        df_faturamento = dataframes['faturamento'].copy()
        
        # Converte datas em todos os dataframes
        df_os['data'] = pd.to_datetime(df_os['data'], format='%Y-%m-%d', errors='coerce')
        df_orcamento['data'] = pd.to_datetime(df_orcamento['data'], format='%Y-%m-%d', errors='coerce')
        df_faturamento['data'] = pd.to_datetime(df_faturamento['data'], format='%Y-%m-%d', errors='coerce')
        
        # Remove registros sem data
        df_os = df_os.dropna(subset=['data'])
        df_orcamento = df_orcamento.dropna(subset=['data'])
        df_faturamento = df_faturamento.dropna(subset=['data'])
        
        # Calcula o intervalo dos √∫ltimos 5 anos
        ano_atual = datetime.now().year
        data_inicial = datetime(ano_atual - 4, 1, 1)
        
        # Adiciona coluna de ano em todos os dataframes
        df_os['ano'] = df_os['data'].dt.year
        df_orcamento['ano'] = df_orcamento['data'].dt.year
        df_faturamento['ano'] = df_faturamento['data'].dt.year
        
        # Filtra os dados para os √∫ltimos 5 anos
        df_os_filtrado = df_os[df_os['data'] >= data_inicial].copy()
        df_orcamento_filtrado = df_orcamento[df_orcamento['data'] >= data_inicial].copy()
        df_faturamento_filtrado = df_faturamento[df_faturamento['data'] >= data_inicial].copy()
        
        # Expander com filtros
        with st.expander("üîç Filtros de An√°lise"):
            anos_disponiveis = sorted(df_os_filtrado['ano'].unique())
            if anos_disponiveis:
                opcoes_anos = ['Todos'] + [str(ano) for ano in anos_disponiveis]
                anos_selecionados = st.multiselect(
                    "Selecione os anos:",
                    options=opcoes_anos,
                    default=[],  # Remove o default
                    key="filtro_anos_producao"
                )
        
        # S√≥ mostra dados se algum ano for selecionado (incluindo "Todos")
        if anos_selecionados:
            # Se "Todos" estiver selecionado, usa todos os anos dispon√≠veis
            if 'Todos' in anos_selecionados:
                anos_numericos = [int(ano) for ano in anos_disponiveis]
            else:
                anos_numericos = [int(ano) for ano in anos_selecionados]
            
            df_os_filtrado = df_os_filtrado[df_os_filtrado['ano'].isin(anos_numericos)]
            df_orcamento_filtrado = df_orcamento_filtrado[df_orcamento_filtrado['ano'].isin(anos_numericos)]
            df_faturamento_filtrado = df_faturamento_filtrado[df_faturamento_filtrado['ano'].isin(anos_numericos)]
            
            # Atualiza todos os dataframes filtrados
            dataframes_filtrados = {
                'os': df_os_filtrado,
                'orcamento': df_orcamento_filtrado,
                'faturamento': df_faturamento_filtrado
            }
            
            # Calcula KPIs com os dados filtrados
            kpi_service = KPIService(dataframes_filtrados)
            kpis = kpi_service.calcular_kpis_producao()
            
            # Renderiza cards de m√©tricas
            metrics = {
                'taxa_aprovacao': {
                    'title': 'Taxa de Aprova√ß√£o',
                    'value': kpis['taxa_conversao'],
                    'formatter': 'percentage',
                    'help_text': 'Percentual de or√ßamentos convertidos em OS',
                    'positive_is_good': True,
                    'decimals': 1
                },
                'tempo_orc_os': {
                    'title': 'Tempo M√©dio Or√ß ‚Üí OS',
                    'value': kpis['tempo_medio_orc_os'],
                    'suffix': ' dias',
                    'help_text': 'Tempo m√©dio entre or√ßamento e abertura de OS',
                    'positive_is_good': False,
                    'decimals': 1
                },
                'tempo_os_fat': {
                    'title': 'Tempo M√©dio OS ‚Üí Fat',
                    'value': kpis['tempo_medio_os_fat'],
                    'suffix': ' dias',
                    'help_text': 'Tempo m√©dio entre OS e faturamento',
                    'positive_is_good': False,
                    'decimals': 1
                },
                'valor_medio_aprov': {
                    'title': 'Valor M√©dio Aprovados',
                    'value': kpis['valor_medio_aprovados'],
                    'formatter': 'currency',
                    'help_text': 'Valor m√©dio dos or√ßamentos aprovados',
                    'positive_is_good': True
                },
                'perc_fat_os': {
                    'title': '% Faturamento via OS',
                    'value': kpis['perc_faturamento_os'],
                    'formatter': 'percentage',
                    'help_text': 'Percentual do faturamento gerado via OS',
                    'positive_is_good': True,
                    'decimals': 1
                }
            }
            
            render_metrics_section("Indicadores de Produ√ß√£o", metrics, columns=5)
            
            # Cria e exibe o gr√°fico de status
            st.markdown("### Status das Ordens de Servi√ßo")
            fig_status = create_os_status_chart(df_os_filtrado)
            if fig_status:
                st.plotly_chart(fig_status, use_container_width=True)
            else:
                st.error('Erro ao criar gr√°fico de status das OS')
            
            # Cria e exibe o gr√°fico de tempo m√©dio
            st.markdown("### Tempo M√©dio em cada Etapa")
            
            # Expander explicativo do gr√°fico de tempo m√©dio
            with st.expander("‚ÑπÔ∏è Como interpretar o Tempo M√©dio?"):
                st.markdown("""
                    O gr√°fico de **Tempo M√©dio em cada Etapa** apresenta a m√©dia de dias desde a abertura da OS at√© o momento atual, agrupado por status. 
                    
                    **Como √© calculado:**
                    - Tempo = Data Atual - Data de Abertura da OS
                    - Os tempos s√£o agrupados por status atual da OS
                    - √â calculada a m√©dia de tempo para cada status
                    
                    **Como analisar:**
                    1. **Gargalos**: Status com tempo m√©dio elevado podem indicar gargalos no processo
                    2. **Efici√™ncia**: Compare os tempos entre diferentes per√≠odos para avaliar melhorias
                    3. **Metas**: Use como refer√™ncia para estabelecer tempos-alvo totais
                    4. **Prioriza√ß√£o**: Identifique quais status precisam de aten√ß√£o imediata
                    
                    **Dicas de interpreta√ß√£o:**
                    - O tempo mostrado √© o total desde a abertura da OS, n√£o apenas o tempo no status atual
                    - OS's faturadas tendem a mostrar tempos maiores por representarem o ciclo completo
                    - OS's em status iniciais tendem a mostrar tempos menores por serem mais recentes
                    - Considere fatores sazonais que podem impactar os tempos m√©dios
                """)
            
            fig_tempo = create_os_tempo_medio_chart(df_os_filtrado)
            if fig_tempo:
                st.plotly_chart(fig_tempo, use_container_width=True)
            else:
                st.error('Erro ao criar gr√°fico de tempo m√©dio das OS')

            # Cria e exibe o gr√°fico de gargalos
            st.markdown("### Gargalos de Produ√ß√£o")
            
            # Expander explicativo do gr√°fico de gargalos
            with st.expander("‚ÑπÔ∏è Como interpretar os Gargalos de Produ√ß√£o?"):
                st.markdown("""
                    O gr√°fico de **Gargalos de Produ√ß√£o** apresenta o fluxo acumulado de OS's atrav√©s das diferentes etapas do processo produtivo.
                    
                    **Como √© calculado:**
                    - Cada n√≠vel mostra a quantidade total de OS's que passaram ou est√£o em cada status
                    - As porcentagens indicam a taxa de convers√£o entre etapas sucessivas
                    - A largura das barras representa o volume acumulado em cada etapa
                    
                    **Como analisar:**
                    1. **Volume Total**: A primeira barra (Abertas) mostra o total de OS's no sistema
                    2. **Progress√£o**: Cada etapa mostra quantas OS's chegaram at√© ali
                    3. **Convers√£o**: A diferen√ßa entre etapas mostra quantas OS's ainda n√£o avan√ßaram
                    4. **Efici√™ncia**: Quedas acentuadas indicam poss√≠veis gargalos no processo
                    
                    **Dicas de interpreta√ß√£o:**
                    - OS's canceladas n√£o s√£o inclu√≠das para n√£o distorcer a an√°lise do fluxo
                    - Uma queda suave entre etapas indica um processo equilibrado
                    - Quedas bruscas indicam ac√∫mulo de OS's naquela etapa
                    - Compare os volumes entre per√≠odos para identificar tend√™ncias
                """)
            
            fig_gargalos = create_os_gargalos_chart(df_os_filtrado)
            if fig_gargalos:
                st.plotly_chart(fig_gargalos, use_container_width=True)
            else:
                st.error('Erro ao criar gr√°fico de gargalos de produ√ß√£o')
        else:
            st.info("üëÜ Selecione um per√≠odo para visualizar os dados")
            
    except Exception as e:
        logger.error(f"Erro ao carregar dados: {str(e)}")
        st.error(f"Erro ao carregar dados: {str(e)}")
        st.info("Dashboard em desenvolvimento...") 